4.3    DevOps automation scenario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

[width="100%",cols="20%,20%,20%,20%,20%",]
|=======================================================================
|* * |*Strategy to Portfolio* |*Requirement to Deploy* |*Request to
Fulfill* |*Detect to Correct*

|*People* a|
Establish common values and awareness

Culture of systems engineering and collaboration

 |Ops cross-pollination |Training to develop and support maximum
automation |Dev on support frontline

|*Process* a|
Matrix organization and service aligned virtual teams supported by
shared-services engineering

Communication & Co-ordination? Awareness, Ongoing Feed-forward and
Feedback

Agile planning, Reduce WIP

 |Delivery and deployment cadence |Service catalog |Incident and Change
Management

|*Technology* a|
Lifecycle Management & Automation

Planning, reporting

metrics management (KPIs ? MTBF, MTRS)

 a|
Automate build, test

 

 a|
Automate release, deployment

Infrastructure virtualization and provisioning automation

Standardized services and components ? Common tools, modular design,
systems thinking to enable reuse

 |Automate monitoring, workload management
|=======================================================================

4.3.1    Scenario ?introduction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The core DevOps scenario is described thus:

*_Develop and deploy software functionality from development to
operations in a maximally automated model, with sustainable velocity and
demonstrating effective feedback._*

There are many references cited in this document on the origins and
current thinking around DevOps.

A variety of sources [link:REF_32[32-36]] suggest some common
architectural elements, named here as encountered:

?         Source Repository

?         Software Configuration Management

?         Continuous Integration and Build Management

?         Release Management

?         Build Console

?         Test Management

?         Package Repository

?         Deployment Engine

?         Deployment Console

?         Infrastructure Manager

?         Configuration Management Database

?         Event Management

?         Element Management

?         Business Process Management

Note that these elements have not been rationalized; there are overlaps.

In terms of scenarios, Eric Minick (formerly of UrbanCode, now of IBM)
suggests a set of overlapping, cumulative DevOps scenarios
[link:REF_33[33]] including:

?         Build software

?         Deploy software

?         System testing on deployment

?         Continuous delivery with monitoring and rollback

We will adopt this set of scenarios.

Note that this scenario does not include infrastructure as code.

4.3.2    Process flows
^^^^^^^^^^^^^^^^^^^^^^

While the overall goal of DevOps is integrated software delivery and
deployment, it is possible to break this down into a set of smaller
building blocks which makes the problem more manageable.

*It is critical in reading these scenarios to understand that they are
intended to be run frequently and iteratively. Without that
understanding, the critical Agile goals of fast feedback and maximizing
information are not realized.*

4.3.2.1     Build software
++++++++++++++++++++++++++

In this scenario software is constructed, tested, incorporated into a
mainline trunk, and built into releasable packages on an ongoing basis.
This is the basic Continuous Integration use case.

image:../images/image018.png[image]

Reading the diagram from left to right:

1.    First, code is checked into the Service Development Component,
which equates to Source Control and any additional services.

2.    This triggers workflow to start the new build. This may be done
immediately, or on a batch basis (i.e. the ?nightly build.?)

3.    The Build Management component, performing Continuous Integration,
runs tests (invoking the Test Management Component), including
functional unit tests as well as external static analysis if called for.
Test execution may result in defects being logged.

4.    If the build succeeds, the built package is stored in the Release
Design Component (aka package repository).

4.3.2.2     Deploy software
+++++++++++++++++++++++++++

In this scenario software is pulled from the package repository and
applied to target environments in a repeatable

image:../images/image019.png[image]

1.    First, some event (automated, e.g. from a successful build, or
human initiated) has initiated the deployment process.

2.    A proposed change has been submitted to and approved by the Change
Control component (this may be a standard change and approved in an
automated manner)

3.    The actual artifacts/package are pulled from the Release Design
Component into the Deployment Management System(s) and applied to the
Target System

4.    The CMDB Component is updated as required with any new
dependencies or other information originating from the package manifest.

Notes:

?         This is the point at which OSLC or TOSCA [link:REF_37[37]]
may come into play.

4.3.2.3     System testing on deployment
++++++++++++++++++++++++++++++++++++++++

In this scenario system level tests are applied to the deployed
packages.

image:../images/image020.png[image] +

1.    Per the last scenario, some event has resulted in the deployment
of software to a target system.

2.    The Test Management Component executes system-level, integration,
and/or performance tests against the target system (which may be any
environment).

3.    Results (as in the first scenario) are recorded in the Defect
Management Component.

The reader may note that Incident Management is not included in this
scenario; it is in the next one.

 

4.3.2.4     Continuous delivery with monitoring and rollback
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

This scenario applies monitoring, event management, and automated
rollback to the previous.

image:../images/image021.png[image]

1.    The software is now deployed into an environment with some level
of operational monitoring, starting at the lowest ?service monitoring?
level ? e.g., probes and log monitors that detect the basic operational
status of the managed element.

2.    The service monitoring component then raises events into an event
management component (sometimes called a ?manager of managers.?)

3.    The Event Management component draws upon CMDB dependencies and
its own business rules to determine if an actual Incident should be
declared.

4.    The Incident is declared, and if severe enough, may warrant
rollback of the change.

5.    The proposed rollback of the Change is approved via the Change
Control component

6.    The Deployment Management system then reverses the change.

7.    (Not shown) Root cause analysis and remediation then are presumed
to occur.

Notes:

?         There are various patterns for the roles that element
monitors, event managers, and incident systems play, but a three-tier
pattern is often seen.?

?         The term ?Service Monitoring Component? is a bit of a
misnomer, as true service-awareness is not understood at the element or
system level, but rather require the dependencies from the CMDB.

 

4.3.2.5     DevOps interpreted as an ITIL? ?flow
++++++++++++++++++++++++++++++++++++++++++++++++

This is an auxiliary view of the end to end flow, interpreted as ITIL?
?processes.

_image:../images/image022.png[image]_

4.3.2.6     ??? DevOps interpreted as a SAFe flow
+++++++++++++++++++++++++++++++++++++++++++++++++

This scenario will contrast with the previous scenario and represent the
end to end delivery in SAFe terminology.

_Note: If we bring in SAFE capabilities, we may need two capability
?namespaces? ? need to discuss._

4.3.2.7     DevOps and infrastructure-centric use cases
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

In scope?

 

_ +
 _
_ _

4.3.2.8     DevOps pipeline as an ITIL? ?flow with key data objects
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Key question: is there a ?Release? data object independent of the
?Release Package? ? the ?Release? being metadata to the actual contents
of the ?Release Package???

_image:../images/image023.png[image]_

_ +
 _
_ +
 _
*Capability*

*Process*

*Requirement*

 

 

 

_ _

_ _

4.3.3    Automation Specification using the Reference Architecture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_ _

4.4    Infrastructure as code / cloud scenario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

4.5    Kanban scenario
~~~~~~~~~~~~~~~~~~~~~~

A critical concern for Agile product development is identifying where
queues are prescribed, and therefore where work in process may
accumulate and where demand is expressed for the end user. As Don
Reinertsen notes [link:REF_4[4]],

_Queues matter because they are economically important, they are poorly
managed, and they have the potential to be much better managed. Queues
profoundly affect the economics of product development (IT services are
a form of product). They cause valuable work products to sit idle,
waiting to access busy resources. This idle time increases inventory,
which is the root cause of many other economic problems._

_Queues hurt cycle time, quality, and efficiency. Despite their economic
importance, queues are not managed in today's development processes. Few
product developers are aware of the causal links between high
capacity-utilization, queues, and poor economic performance. Instead,
developers assume that their cycle times will be faster when resources
are fully utilized. In reality, high levels of capacity utilization are
actually a primary cause of long cycle time_

Manufacturing companies use Operations theory to identify bottlenecks
and eliminate them - they've identified the value chain is only as good
as the weakest link (or weakest capacity). Little's Law and associated
rules can be adopted for modeling the service value chain and eliminate
both bottlenecks and waste.

The Kanban movement is responding to this by essentially centralizing
heterogeneous demand into simplified, common queuing mechanisms. A given
team?s Kanban board may encompass Requirements, Changes, Service
Requests, Work Orders, and even Incidents and Problems - anything that
results in someone spending some time on it. Which of these the Kanban
board includes depends on the context and function(s) of the team in
question.

 

image:../images/image024.png[image]

Figure 7. Heterogeneous Kanban board

This industry direction, while clear, remains largely undocumented. The
reader is referred to Ian Carroll?s website IT Ops Kanban
[link:REF_38[38]] and the 2014 presentation by ING Bank, ?ITIL? ?and
DevOps at war in the enterprise.? [link:REF_39[39]]? In that
presentation, one of the presenters specifically discourages the use of
a Problem ticket in a Service Management tool if the Problem is also a
user story. ?Similar themes can be found in Kim?s _The Phoenix Project_
[link:REF_15[15]] and in Limoncelli?s __The Practice of Cloud System
Administration__. ?Development and operations can best speak the same
language by using the same tools wherever possible. This can be as
simple as using the same bug-tracking system for both development and
operations/ deployment issues? __ [link:REF_40[40]], p. 184.

The IT4IT reference architecture therefore explicitly identifies the
functional components that imply queues and is working towards a
logically unified queuing interface so that demand may be understood
globally across the IT value chain. Some initial requirements for this
might be:

?         A view of unified demand should be possible via integrating
all queues

?         All functional components that contain queues should be
identified

?         Cumulative flow visibility should be enabled

?         They should have common aggregation into BI

?         Smaller ?silo? queues need to be integrated into longer,
cross-functional, higher value queues

?         Within a project, have a common backlog for development and
infrastructure tasks

The possibility should be explored of defining an abstract queueing
interface, specifying which objects implement it. _[Note: Did the
Workflow Management Coalition do something like this?]_

Here is a high level representation of IT4IT functional components
possibly containing queues:

image:../images/image025.png[image]

_Lars comment: The use of RFC?s as a way of controlling what is planned
to be changed, have a log of change that happened, and to govern
approving change (especially w.r.t. risk, conflicts, change windows, ?).
This use is largely not used by existing Agile projects, but they
instead have a concept of release control that understand the status of
a release (and the ability to turn on or off features based on status)_

ESITs for all queue based systems

Aspect orientation

 +
 what are the top-down drivers +
 +
 how it works in the pure agile community vs waterfall vs hybrid

 +
 

 

 

[width="100%",cols="34%,33%,33%",]
|==================================================
|*Artifact* |*Attributes* |*Additional Information*
|*Interaction* |ID | 
|* * |? | 
|*Incident* |ID | 
|* * |? | 
|* * |  | 
|==================================================

 

 

 

 

 +
 

5      Proposed Changes to the Reference Architecture
-----------------------------------------------------

 
^

[width="100%",cols="34%,33%,33%",]
|=======================================================================
|*ID* |*Proposed Change* |*Status*

|*1* a|
Add new attributes to portfolio backlog item within the Portfolio Demand
component as follows:

?         ID

?         Portfolio

?         Summary

?         Description

?         Backlog Status

?         Backlog Priority

?         Proposed Budget

?         Fiscal Year

?         IT Service ID/Name

?         Requirement ID

?         Scope Agreement ID

 a|
Proposed

 

|*2* a|
Add new attributes to conceptual service within the Service Portfolio
component as follows:

?         ID

?         Name

?         Description

 a|
Proposed

 

|*3* a|
Add new attributes to requirement within the Requirement component as
follows:

?         ID

?         IT Service ID/Name

?         Summary

?         Description

?         Backlog Status

?         Backlog Priority

?         Portfolio Backlog ID

 |Proposed

|*5* a|
Add new attributes to defect within the Defect functional component as
follows:

?         ID

?         IT Service ID/Name

?         Summary

?         Description

 |Proposed

|*6* a|
Add new attributes to known error in the Problem functional component as
follows:

?         ID

?         IT Service ID/Name

?         Summary

?         Description

 |Proposed

|*7* a|
Add new attributes to scope agreement in the Proposal component as
follows:

?         ID

?         Portfolio Backlog Item ID

?         IT Service ID/Name

?         Summary

?         Description

 |Proposed
|=======================================================================

 
^

6      Appendix
---------------

 

 

6.1    Outstanding issues in this document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="50%,50%",]
|=======================================================================
|*Name* |*Description*

|*Story traceability* |Discuss relationship between stories and DevOps
pipeline, traceability from build process back to user requirement ? ALM
system needed?

|*DevOps artifacts & data objects* |Need to complete data layer for
DevOps section

|*4.3 diagram* |Consider whether should go to front section and cover
entire document.

|*4.3.2* |Consider high level diagram illustrating iterative nature of
DevOps
|=======================================================================

 

6.2    Abbreviations used
~~~~~~~~~~~~~~~~~~~~~~~~~

 

[width="100%",cols="50%,50%",]
|=============================
|*Abbreviation* |*Explanation*
|* * | 
|=============================

 

 

 

 

 

 +
* *

6.3    References
~~~~~~~~~~~~~~~~~

 

[width="100%",cols="34%,33%,33%",]
|=============================
|*Document* |*Version* |*Date*
|* * |  | 
|=============================

 

 

1.???????? Ries, E., __The lean startup : how today's entrepreneurs use
continuous innovation to create radically successful businesses__. 1st
ed. 2011, New York: Crown Business. 320 p.

2.???????? Anderson, D.J., __Kanban: Successful Evolutionary Change for
your Technology Business__. 2010, Sequim, WA: Blue Hole Press.

3.???????? Humble, J. and Farley, D., __Continuous delivery__. 2011,
Boston: Addison-Wesley. xxxiii, 463 p.

4.???????? Reinertsen, D.G., __The principles of product development
flow: second generation lean product development__. 2009, Redondo Beach,
Calif.: Celeritas. ix, 294 p.

5.???????? Ohno, T., __Toyota production system : beyond large-scale
production__. 1988, Cambridge, Mass.: Productivity Press.

6.???????? Krafcik, J., _Triumph of the lean production system._ Sloan
Management Review, 1988. **30**(1): p. 41-52.

7.???????? Liker, J.K., __The Toyota way : 14 management principles from
the world's greatest manufacturer__. 2004, New York: McGraw-Hill. xxii,
330 p.

8.???????? Womack, J.P. and Jones, D.T., __Lean thinking: banish waste
and create wealth in your corporation__. 1st Free Press ed. 2003, New
York: Free Press. 396 p.

9.???????? Womack, J.P., et al., __The machine that changed the world :
based on the Massachusetts Institute of Technology 5-million dollar
5-year study on the future of the automobile__. 1990, New York: Rawson
Associates. viii, 323 p.

10.??????? Goldratt, E.M., __Critical chain__. 1997, Great Barrington,
Ma.: North River. 246 p.

11.??????? Goldratt, E.M. and Cox, J., __The goal : a process of ongoing
improvement__. 3rd rev. ed. 2004, Great Barrington, MA: North River
Press. 384 p.

12.??????? Agile Alliance. __Agile Manifesto and Principles__. 2001?
4/13/2011]; Available from:
http://agilemanifesto.org/principles.html[*http://agilemanifesto.org/principles.html*].

13.??????? Poppendieck, M. and Poppendieck, T.D., __Lean Software
Development: An Agile Toolkit__. The Agile Software Development Series,
ed. A. Cockburn and J. Highsmith. 2003, Boston: Addison Wesley.

14.??????? Reinertsen, D.G., __Managing the design factory: a product
developer's toolkit__. 1997, New York ; London: Free Press. xi,269p.

15.??????? Kim, G., Behr, K., and Spafford, G., __The Phoenix Project: A
Novel About IT, DevOps, and Helping Your Business Win__. 2013: IT
Revolution Press.

16.??????? Allspaw, J. and Hammond, P., __10 deploys per day: Dev & ops
cooperation at Flickr__, in __Velocity 2009__2009, O'Relly Publications:
San Jose, CA.
http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr[*http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr*]

17.??????? Betz, C.T., __Architecture and Patterns for IT: Service and
Portfolio Management and Governance (Making Shoes for the Cobbler's
Children), 2nd Edition__. 2011, Amsterdam: Elsevier/Morgan Kaufman.

18.??????? Buschmann, F., __Pattern-oriented software architecture : a
system of patterns__. 1996, Chichester ; New York: Wiley. xvi, 457.

19.??????? Fowler, M., __Analysis patterns : reusable object models__.
1997, Menlo Park, Calif.: Addison Wesley. xxi, 357.

20.??????? Fowler, M., __Patterns of enterprise application
architecture__. The Addison-Wesley signature series. 2003, Boston:
Addison-Wesley. xxiv, 533.

21.??????? Gamma, E., __Design patterns : elements of reusable
object-oriented software__. 1995, Reading, Mass.: Addison-Wesley. xv,
395.

22.??????? Hay, D.C., __Data model patterns : conventions of thought__.
1996, New York: Dorset House Pub. xix, 268.

23.??????? Hay, D.C., __Data model patterns : a metadata map__. 2006,
San Francisco, Calif.: Morgan Kaufmann ; Oxford : Elsevier Science
[distributor]. xx, 406 p. : ill. ; 25 cm.

24.??????? Hohpe, G. and Woolf, B., __Enterprise integration patterns :
designing, building, and deploying messaging solutions__. 2003, Boston:
Addison-Wesley. . cm.

25.??????? Larman, C., __Applying UML and patterns : an introduction to
object-oriented analysis and design and the unified process__. 2nd ed.
2002, Upper Saddle River, NJ: Prentice Hall PTR. xxi, 627.

26.??????? Silverston, L., __The data model resource book Vol 3:
Universal patterns for data modeling__. 2008, Indianapolis, Ind.: Wiley.
xxxii, 606 p.

27.??????? Poppendieck, M. and Poppendieck, T.D., __Implementing lean
software development : from concept to cash__. 2007, London:
Addison-Wesley. xxv, 276 p.

28.??????? Kniberg, H., Beck, K., and Keppler, K., __Lean from the
trenches : managing large-scale projects with Kanban__. Pragmatic
programmers. 2011, Dallas, Tex.: Pragmatic Bookshelf. xiii, 157 p.

29.??????? Bell, S.C. and Orzen, M.A., __Lean IT__. 2010, Boca Raton,
Florida: CRC Press.

30.??????? Scotland, K., __Defining the Last Responsible Moment__, in
__AvailAgility__2010.
http://availagility.co.uk/2010/04/06/defining-the-last-responsible-moment[*http://availagility.co.uk/2010/04/06/defining-the-last-responsible-moment*]

31.??????? Duvall, P.M., Matyas, S., and Glover, A., __Continuous
integration : improving software quality and reducing risk__.
Addison-Wesley signature series. 2007, Upper Saddle River, NJ:
Addison-Wesley. xxxiii, 283 p.

32.??????? Edwards, D., __Integrating DevOps tools into a Service
Delivery Platform__, 2012.
http://dev2ops.org/2012/07/integrating-devops-tools-into-a-service-delivery-platform-video/[*http://dev2ops.org/2012/07/integrating-devops-tools-into-a-service-delivery-platform-video/*]

33.??????? Minick, E., __A DevOps Toolchain: There and back again__,
2012, Slideshare.net.
http://www.slideshare.net/Urbancode/building-devops-toolchain[*http://www.slideshare.net/Urbancode/building-devops-toolchain*]

34.??????? Thompson, L., __Hitchhikers Guide to OpenStack Toolchains__,
2014.
https://http://www.openstack.org/assets/presentation-media/Hitchhikers-Guide-to-OpenStack-Toolchains.pdf[*www.openstack.org/assets/presentation-media/Hitchhikers-Guide-to-OpenStack-Toolchains.pdf*]

35.??????? Betz, C., __Release management integration pattern - seeking
devops comments__, in __Lean4IT: The architecture of IT value__2011.
http://www.lean4it.com/2011/01/release-management-integration-pattern-seeking-devops-comments.html[*http://www.lean4it.com/2011/01/release-management-integration-pattern-seeking-devops-comments.html*]

36.??????? Shortland, A. and Lei, M., __Using Rundeck and Chef to build
DevOps Toolchains__, 2012.
http://dev2ops.org/2012/05/using-rundeck-and-chef-to-build-devops-toolchains-at-chefcon/[*http://dev2ops.org/2012/05/using-rundeck-and-chef-to-build-devops-toolchains-at-chefcon/*]

37.??????? OASIS, __Topology and Orchestration Specification for Cloud
Applications Version 1.0 (TOSCA)__, 2013.
http://docs.oasis-open.org/tosca/TOSCA/v1.0/os/TOSCA-v1.0-os.html[*http://docs.oasis-open.org/tosca/TOSCA/v1.0/os/TOSCA-v1.0-os.html*]

38.??????? Carroll, I., __Various__, in __IT Ops Kanban: Kanban Case
Study for Operations__2013.
http://itopskanban.wordpress.com/before/[*http://itopskanban.wordpress.com/before/*]

39.??????? Bouwman, J.-J. and Heistek, M. __ITIL? ?and DevOps at war in
the enterprise__. in _DevOpsDays_ 2014. Amsterdam.
https://http://www.youtube.com/watch?v=_dDsdbkSgOc[*www.youtube.com/watch?v=_dDsdbkSgOc*]

40.??????? Limoncelli, T.A., Chalup, S.R., and Hogan, C.J., __The
Practice of Cloud System Administration: Designing and Operating Large
Distributed Systems, Vol. 2__, 2014, Pearson Education.

 

 
