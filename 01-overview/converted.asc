3.1    Business Context
~~~~~~~~~~~~~~~~~~~~~~~

The Agile movement now represents many years of experience and theory
and increasingly defines both the *goals* of information technology
management as well as its **execution**.

Business strategies increasingly emphasize business experimentation,
?Fail Fast,? and ?Think Big, Start Small? [link:REF_1[1]]. ?These
strategies require corresponding IT agility: moving from large ?batches?
of project requirements to the software equivalent of Lean ?single-piece
flow.?

There are many books and other resources available describing Agile and
the reader is referred to the references, especially
[link:REF_2[2-4]] as initial reading.??

_Trey comments:_

_This is the language we use internal.  We of course have much
skepticism on both sides of this argument._

_ _

_Agile Promise:  Quality, Scope, and Cost._

_-          Quality and Cost are fixed,  Scope is variable._

_ _

_Traditionally, we have always insisted that Quality and Scope are
fixed, cost is variable in governance. _

_-          In practice / run-time:  Cost is agreed in a project
contract and then development cost becomes fixed (culture etc. makes it
less painful to miss on quality or scope than to overrun cost). 
Projects then deliver with either Quality debt or scope debt._

_ _

_ _

_Budgeting_

http://scaledagileframework.com/budgets/[*_http://scaledagileframework.com/budgets/_*]

_ _

_I just found this because I couldn?t find the standard language we
use.  I think it is the essence of the question:  Agree at the beginning
on how the queue for value delivery decisions/authorizations will be
done._

https://www.scrumalliance.org/community/articles/2014/march/good-bad-and-ugly-of-agile-fixed-price-contracts[*_https://www.scrumalliance.org/community/articles/2014/march/good-bad-and-ugly-of-agile-fixed-price-contracts_*]

_ _

_Budgeting topic:_

_Devils Triangle:_

_Scope ? Quality ? Money_

_Traditional: Scope is fixed_

_Agile: Scope is variable, Quality and Money (resources) is fixed._

_ _

_Change Management topic:_

_Change management and certainly discuss this in the light of how to
change the data structure. System of insight changes are relatively
easy, it can use feature toggling etc. But when the data structure
changes, the risk of the deployment increases. THis is where change
control and maybe even change management is needed. Also, I think in a
lot of enterprises, Change management is still needed to help make the
transition into agile. Automating it is what the objective is._

_ _

_Discussion on the name of Service Development Component._

_ _

_Ask if Vasu, Peter G and Kobi to talk about the combination of Chef
recipes and the code as a combined package._

_ _

_Queuing represented as a set of ESITS. Talks about separating the queue
management and the SoE that allows access to multiple queues and allow
work items to be ?assigned and worked on? from a single interface. This
?SoE? uses the ESITS of the various Queues_

_ _

_See Sue?s notes in Plato site._

 

3.1.1    Relationship between Lean, Agile, DevOps, and related
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 

image:images/image004.png[image]

Figure 1. Lean, Agile, Devops, and related conceptual framing

 

?Lean? is the overall philosophical framework, generally credited to
Ohno and others at Toyota [link:REF_5[5]], with the name ?Lean?
first applied by Krafcik [link:REF_6[6]] and further Western
development and popularization by Womack, Jones, Liker, and others
[link:REF_7[7-9]]. Another key related source is the writings of Eli
Goldratt [link:REF_10[10], link:REF_11[11]].

The application of Lean philosophy to software engineering is closely
related to the term ?Agile,? as in ?Agile Development.? The often-cited
?Agile Manifesto? [link:REF_12[12]] states:

_We are uncovering better ways of developing software by doing it and
helping others do it. Through this work we have come to value:_

?         __Individuals and interactions over processes and tools__

?         __Working software over comprehensive documentation__

?         __Customer collaboration over contract negotiation__

?         __Responding to change over following a plan__

_That is, while there is value in the items on the right, we value the
items on the left more._

The Poppendiecks were early appliers of Lean principles to software
development [13]. David Anderson has popularized the
Toyota Production System term ?Kanban? as a form of collaborative work
management for software product teams, focused on self-organizing teams
strongly concerned with flow and limiting work in process
?[link:REF_2[2]]. Both the Poppendiecks and Anderson cite the
influence of Don Reinertsen [link:REF_4[4], link:REF_14[14]].
_The Phoenix Project_ is a notable exploration of the Lean, Agile, and
DevOps themes [link:REF_15[15]].

image:images/image005.png[image]

Figure 2. Goals and challenges of the IT value chain

As seen in Figure 2, the traditional IT value chain has a number of
challenges. Manual processes, silo walls between development and
operations, and poorly integrated tools are some of the problems seen in
the legacy methods to IT product development. .

?DevOps? (Figure 3) is the emerging industry response. Coined as a
portmanteau representing ?Development? and ?Operations? (Patrick Debois
is generally credited with originating the term), it represents the
specific concerns of accelerating flow and software delivery from
ideation through production, extending Agile philosophy from its
traditional home in software development into operational domains. Fast
feedback is a critical objective.

image:images/image006.png[image]

Figure 3. The DevOps alternative

Hammond and Allspaw?s ?10 deploys per day: Dev & ops cooperation at
Flickr? is a key document [link:REF_16[16]] and Humble and Farley?s
?Continuous Delivery? the first comprehensive text on the subject
[link:REF_3[3]].?

In short, for the purposes of this document, Kanban and DevOps, as with
other terms like Scrum and Extreme Programming, are seen as specific
manifestations of Agile, which is in turn an IT-centric manifestation of
Lean.

Some argue that DevOps must transcend Agile, as the broader term.
However, if the Agile Manifesto does NOT apply to IT operations, it is
difficult to see how DevOps can succeed in its goals.

 

3.1.2    Agile and the IT4IT framework
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As IT4IT is process and methodology agnostic, DevOps can be mapped into
the reference architecture (Figure 4, Figure 5)

image:images/image007.png[image]

Figure 4. DevOps across the IT value streams

image:images/image008.png[image]

Figure 5. Agile concerns across the IT4IT reference architecture

As we can see in Figure 5, Agile concerns cross the IT4IT framework:

?         Enterprise architecture and portfolio backlog

?         Automation as design criteria

?         Requirements as defects as combined product backlog

?         Automated build process

?         Automated testing

?         Infrastructure as code and automated? deployment

?         Event feedback to product backlog

?         Automatic configuration updates

 

3.1.3    Agile and frameworks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There will likely be concerns from the Agile community about the role,
purpose, and desirability of any framework purporting to address some
aspect of Agile. It may seem paradoxical to position a framework to
assist a philosophy that values processes, tools, and comprehensive
documentation ?less.? However, the Agile Manifesto clearly states that
?there is value on the right.? Some notes:

First, Agile authors, case studies and presentations provide a wealth of
tangible objectives that can inform the development of a reference
architecture.

IT4IT is not a methodology. It is not primarily concerned with how work
is done. This distinguishes it from CMMI, ITIL?, SAFe, Scrum, and so
forth.

It is a ?framework? and ?prescriptive? in the sense of it being a
reference model**. It is ?prescriptive? in the same sense that design
patterns are prescriptive ? they prescribe a solution, but still need to
be applied correctly.**

Frameworks can be implementation methods or reference models. IT4IT is a
reference model and as such, similar to the patterns literature
[link:REF_17[17-26]].

IT4IT as a standard is primarily intended for large enterprise IT
organizations. The intent is to enable loosely coupled, decentralized
Agile teams by prescribing simple IT coordination interfaces supporting
accepted Agile implementation patterns, informed by documented Agile
principles, providing end to end traceability of IT services.?

IT4IT may become prescriptive in a tighter sense when applied to IT
management tool interoperability. Enabling such interoperability would
hopefully be viewed positively by the Agile community. The framework has
value even without that, just as eTOM?s value is not only in
standardizing interfaces. However, IT4IT is NOT prescribing particular
tools, practices, or methods.

Also, Agile/Lean has a strong emphasis on culture and organizational
change management. Such concerns are outside the purview of IT4IT, in
general.

3.2    Business Goals
~~~~~~~~~~~~~~~~~~~~~

It is by now well established that the IT value chain is best seen as a
product development and management process, as opposed to a truly
repetitive production process [link:REF_17[17]]. Reinertsen,
Poppendieck, and others have developed a variety of well documented and
empirically proven principles that characterize the Agile/Lean approach
for product development [link:REF_4[4], link:REF_13[13],
link:REF_14[14], link:REF_27[27]]. These apply to software
development, product development, and business development at its most
general.

Essential Agile requirements can be inferred from these classic
questions from Mary and Tom Poppendieck:

?         **How long would it take your organization to deploy a change
that involved just one single line of code?**

?         **Do you deploy changes at this pace on a repeatable, reliable
basis?** **[**link:REF_27[*27*]*], p. 92.*

The Kanban movement addresses these business goals by limiting work in
process through simple and effective shared visual models
[link:REF_2[2], link:REF_28[28]], while the DevOps movement
seeks to satisfy these business goals by accelerating and making the end
to end software pipeline as automated as possible while bridging the
cultural divide between ?Development? and ?Operations.?
[link:REF_3[3]]

image:images/image009.png[image]

Figure 6. Importance of feedback

Feedback is a critical objective in product development (e.g. software
and systems development); as product development is essentially the
generation of information ([link:REF_4[4]], )

Examination of various Agile sources supports the following matrix of
business objectives for the Agile scenario:

 +
 

[width="100%",cols="34%,33%,33%",]
|======================
|*ID* |*Goals* |*Notes*
|======================

[width="100%",cols="34%,33%,33%",]
|=======================================================================
|G.0.1 |Correctly apply economics [link:REF_4[4]] | 

|G.0.1.1 |Understand overall economic impact |e.g. leveraging beneficial
variability and uncertainty, e.g. a 50% chance of making $1m is worth
more than a 100% chance of making $100,000.

|G.0.1.2 |Understand cost of delay and value of information | 

|G.0.1.3 |Understand metrics as economic proxy variables | 

|G.0.2 |Avoid waste [link:REF_4[4], link:REF_27[27],
link:REF_29[29]] | 

|G.0.2.1 |Limit work in process | 

|G.0.2.2 |Reduce task switching or multi-tasking | 

|G.0.2.3 |Eliminate Non-value-add process | 

|G.0.2.4 |Minimize manual work | 

|G.0.2.5 |Identify, make visible, and manage all work queues | 

|G.0.2.6 |Avoid the antipattern of ?optimizing? for utilization
[link:REF_11[11]] | 

|G.0.3 |Maximize information [link:REF_4[4]] | 

|G.0.3.1 |Seek fast feedback | 

|G.0.3.2 |Invest in options where possible (e.g. parallel development to
explore different product directions simultaneously) | 

|G.0.3.3 |Defer commitment until last responsible moment
[link:REF_30[30]] | 

|G.0.3.4 |Ensure information visibility across entire pipeline |Promote
whole systems thinking, ensure broad visibility of functionality moving
through pipeline, support techniques like Incident to Issue linkage

|G.0.4 |Manage for flow under uncertainty [link:REF_4[4]] | 

|G.0.4.1 |Manage batch size | 

|G.0.4.2 |Synchronize complex activities | 

|G.0.4.3 |Minimize variability in repetitive processes | 

|G.0.4.4 |Accept and manage variability in creative processes | 

|G.0.5 |Build effective culture [find Deming on individual vs system
failures] | 

|G.0.5.1 |Manage for end state and intent | 

|G.0.5.2 |Encourage self-organization [link:REF_2[2]] | 

|G.0.5.3 |Tolerate failure; maximize information captured and focus on
problem solving | 

|G.0.5.4 |Employ proven human motivators: autonomy, recognition,
collaboration, flow | 

|G.0.5.5 |Avoid demotivators: control, blame, non-value-adding work | 

|G.0.6 |Build effective software pipeline [link:REF_3[3]] | 

|G.0.6.1 |Continuously integrate and test source code and system
functionality at appropriate levels (e.g. unit, integration, and system)
[link:REF_31[31]] | 

|G.0.6.2 |Maintain complex system functionality in an ?always shippable?
state | 

|G.0.6.3 |Fully automate the repetitive aspects of code development,
build, testing, and deployment | 

|G.0.6.4 |Seek end to end integration of ?development? and ?operations?
tasks, resources, communication, and culture. | 

|G.0.6.5 |Build a product-centric mindset where the overriding goal is
software functioning correctly in production. | 

|G.0.6.6 |Use consistent configurations, toolsets and resources in
building all environments across the pipeline | 

|G.0.6.7 |Roll back failed changes immediately with robust and well
tested, automated approaches. | 

|  |  | 
|=======================================================================

 

Note: There is one set of unified Business goals for the Agile scenario
as a whole, but each sub-scenario has its own requirements.

4      Agile IT4IT Scenarios
----------------------------

 

4.1    Product backlog scenario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The IT Organization wants to manage budget and efforts by portfolios.?
Within the portfolios, there are products (IT services) which are
managed throughout the product (IT service) lifecycle.? The strategic
plans and roadmaps for the business are managed at the portfolio level
(portfolio backlog), and at times are detailed at the product (IT
service) level within the portfolios.? All user requirements,
enhancements, open defects, improvement opportunities, and IT demand are
tracked at the product (IT service) level within a product backlog
(program backlog) which exists throughout the lifecycle of the product
(IT service).?

The IT organization wants the management of the portfolio backlogs
(strategic demand/roadmaps) to be consistent across all portfolios.?
Likewise, the IT organization wants product (IT service) backlogs to be
managed consistently across business units so staff who support various
portfolios and products are using the same tools and processes thereby
reducing total time/cost on projects since different project delivery
staff could be assigned to any project/effort.? Additionally, IT should
never perform work to create/modify an IT service unless the business is
aware and approves any related expenditures.

As the business identifies needs, they work with IT to validate those
business needs against the service portfolio to determine if the needs
could be met by enhancing existing IT services, or if new IT services
would be needed.? The business works with IT to add the business need
(portfolio demand) as a portfolio backlog item for a particular business
unit (portfolio).? Throughout the year, IT and the business collaborate
to determine when funding is available to allow the initiation of work
(project), at that time they will approve work to be performed for one
or more portfolio backlog items.? The portfolio backlog items will be
linked to specific products (IT services) by linking to requirements
(product backlog items).? Once the project funding is approved, work
will begin to create or modify an IT Service(s).

 +
 

 

4.1.1    Requirements
^^^^^^^^^^^^^^^^^^^^^

[width="100%",cols="50%,50%",]
|=======================================================================
|*ID* |*Goals*

|G.01 |Utilize an integrated suite of tools and aligned processes for
all efforts across the IT Organization regardless of approach
(methodology) or customer (business unit) resulting in lower training
costs and increased flexibility in staffing initiatives

|G.02 |Manage and maintain authoritative repositories for key data
elements within the IT Organization

|G.03 |Visibility into planned, in progress, and completed work across
the IT Organization

|G.04 |Roadmaps are derived from the Portfolio Backlog and should exist
for every portfolio with a focus on current fiscal year, view into last
fiscal year, and view into next fiscal year

|G.05 |A product backlog exists for each IT service throughout the life
of that IT service

|G.06 |The product backlog supports any software development methodology
(ie. agile, waterfall, RUP)

|G 07 |Product backlog contains all proposed changes to an IT Service
(ie. user stories, enhancement requests, defects)

|G.08 |Project delivery begins after funding has been approved by the
applicable governing group

|G.09 a|
Ability to capture business needs in the portfolio backlog as a
portfolio backlog item

?         Portfolio

?         Summary

?         Description

?         Status

?         Priority

?         Planned fiscal year

Rough order magnitude effort estimate

|G.10 a|
Ability to link a portfolio backlog item to one or more conceptual
services

?         Portfolio backlog item

Conceptual service

|G.11 a|
Ability to link a portfolio backlog item to one or more product backlog
items

?         Portfolio backlog item

Product backlog item (requirement)

|G.12 a|
Ability to link an IT project to a portfolio backlog item(s)

?         IT project (scope agreement)

Portfolio backlog item

|=======================================================================

 

 

4.1.2    Process flow
^^^^^^^^^^^^^^^^^^^^^

 

image:images/image010.png[image]

_ _

*Process*

*Requirements*

*Record a business need in the Portfolio Backlog*

REQ.01

_The business identifies needs during annual planning and records those
efforts in the roadmap (portfolio backlog).? Annually, a budget is
agreed to by the business and the roadmap is updated to reflect what
work is planned for the current fiscal year and what work will be moved
to future fiscal years.? Throughout the year, additional needs may be
identified in which case the business works with IT to update the
roadmap and potentially defer existing planned work.? The roadmap is
kept in a priority order as funding may be changed throughout the year
and additional work may be brought into a given year, or pushed to a
future year._

_ _

_In some agile shops, annual planning may not occur and the portfolio
backlog is updated as business identifies needs.? As work is planned,
portfolio backlog items will be moved or linked to a program or team
backlog and worked by the agile teams.? _

*Roadmap items are validated against IT services*

REQ.02

_As business needs are identified, IT will work with the business to
understand if an existing service(s) could be modified to meet the need,
or if a new service(s) are needed to meet the need.? As new services are
conceived, portfolio backlog items may be linked to the new services. _

*Map portfolio backlog items to product backlog items*

REQ 03

_IT links portfolio backlog items to one or more product backlog items
(user stories).? This allows traceability of product backlog items to
the scope agreement when one or more portfolio backlog items are
approved to work._

*Approve portfolio backlog item to be worked*

REQ 04

_The business reviews the roadmap (portfolio backlog) and approves
funding for work to begin. The business may delegate funding authority
to the product team and trust that the product team is focused on
delivering business results._

_ _

_The roadmap items are linked to one or more products (IT services) and
the corresponding product backlog items for those IT services.? The
business approves a project, which is linked to the appropriate
portfolio and product backlog items, to begin and with an initial
budget._

 

[width="100%",cols="50%,50%",]
|=======================================================================
|*Goal* |*Explanation*

|*G.01* |Demand processes and management of the portfolio backlog are
consistent across all methodologies and portfolios.

|*G.02* |Single repository for the portfolio backlog is management and
maintained for all portfolios.

|*G03, G04* |A portfolio backlog exists for the key business portfolios
and shows past roadmap items, planned roadmap items, and future roadmap
items.?

|*G 08* |Projects can only start if there is agreement from the business
(IT contract) for scope and cost.?
|=======================================================================

 

4.1.2.1     Essential Services supporting the scenario +
 +
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

image:images/image011.png[image]

 +
 

4.1.2.2     Artifacts and the essential attributes
++++++++++++++++++++++++++++++++++++++++++++++++++

 

image:images/image012.png[image] +

4.1.3    Detailed explanation on Reference Architecture usage. +
 +
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

image:images/image013.png[image]

4.1.4    Key attributes required by this scenario
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[width="100%",cols="34%,33%,33%",]
|=======================================================================
|*Artifact* |*Attributes* |*Additional Information*

|*Conceptual Service* |ID |Unique ID of conceptual service

|* * |Name |This is the name easily identifying the service

|* * |Description |This would represent the short description of a
service

|*Portfolio Backlog Item* |ID |Unique ID of portfolio backlog item

|* * |Portfolio |This would be the portfolio name to which the backlog
item is related

|* * |Summary |This would represent the short description/title/summary
of a given portfolio backlog item

|* * |Description |This would be the full description, ideally supports
rich text

|* * |Backlog priority |This priority is unique across all backlog items
for a single portfolio

|* * |Backlog status |This status shows the state of the backlog item.?
Status would be used by both the business and IT to determine if it was
an agreed roadmap item, proposed, in progress, etc.

|* * |Proposed budget |This would be requirement, defect, or known error

|* * |Fiscal Year |This would indicate in which fiscal year the roadmap
item (portfolio backlog item) is planned.

|* * |IT Service ID/Name |This needs to be at least the IT Service name,
but ideally it would be the IT service ID and service name.

|* * |Requirement ID(s) |This would be used to link a portfolio backlog
item to one or more product backlog items (requirements)

|* * |Scope Agreement ID |This would be used to link a portfolio backlog
item to an Scope Agreement

|*Requirement* |ID |Unique ID of requirement

|* * |IT Service ID/Name |This needs to be at least the IT Service name,
but ideally it would be the IT Service ID from CMDB and the service name

|* * |Summary |This would represent the short description/title/summary
of a given requirement

|* * |Description |This would be the full description, ideally supports
rich text

|* * |Portfolio Backlog ID |This would be used to link a product backlog
item to a portfolio backlog item

|*Scope Agreement* |ID |Unique ID of a scope agreement

|* * |Portfolio Backlog ID |This would be used to link an scope
agreement to a portfolio backlog item

|* * |IT Service ID/Name |This needs to be at least the IT Service name,
but ideally it would be the IT Service ID and the service name

|* * |Summary |This would represent the short description/title/summary
of a given scope agreement

|* * |Description |This would be the full description, ideally supports
rich text
|=======================================================================

 
~

4.2    Scenario ? Manage Product Backlog
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

4.2.1    Scenario introduction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

New product backlog items can come from multiple sources, but should all
be captured in a single repository for an individual IT service.? The
business may ask for enhancements to existing products, IT may identify
known errors or operational issues that need to be remedied; there may
be other defects in the products which need to be resolved.?

4.2.2    Requirements
^^^^^^^^^^^^^^^^^^^^^

 

[width="100%",cols="50%,50%",]
|=======================================================================
|*ID* |*Requirement*

|REQ.05 a|
Ability to capture new enhancement requests or updates to existing
enhancement requests in the product backlog

?         IT Service

?         Summary

?         Description

?         Status

?         Priority

|REQ.06 a|
Ability to add/modify unfulfilled requirements on the product backlog
for an IT service

?         IT Service

?         Summary

?         Description

|REQ.07 a|
Ability to add/modify open project defects which are not resolved prior
to go live on the product backlog for an IT service

?         IT Service

?         Summary

?         Description

|REQ.08 a|
Ability to add/modify known errors to the product backlog for an IT
service

?         IT Service

?         Summary

?         Description

|=======================================================================

 

Process flow

 

image:images/image014.png[image]

_ _

*Process*

*Requirements*

*Log IT Request*

REQ.05

_Anyone in the organization can ask for a product to be enhanced.? These
requests need to be tracked in the product backlog which should exist
for the entire lifecycle of the product.? The system should be able to
track key information about the request such as the summary and
description, status, and priority. The status should reflect information
about the request such as if it is new, approved, rejected, or in
process.? The priority of the request should indicate impact to the
organization and reflect an order of importance with respect to other
items in the product backlog.? The product backlog should be able to be
mapped to portfolio backlog items which are used to obtain approval by
the business to fund an effort.? Many companies have a standing
portfolio backlog item representing a pre-approved fund to enhance a
product based on the product owner?s discretion as delegated by the
business. _

*Record Open Requirements in Product Backlog*

REQ.06

_There are times where requirements which were in scope for the project
are unable to be met during the course of a project.? In these cases,
those requirements should remain in an open status in the system so they
can be grouped into a future release of the IT service.? The project or
delivery team is responsible to make sure the unfulfilled requirements
are reflected in the product backlog._

*Record Open Defect in Product Backlog*

REQ 07

_There are times where a project defect is not so severe as to prevent
the release of an IT service.? In these cases, the defect still needs to
be resolved in a future release and should be added to the product
backlog so it can be implemented in the future. The project or delivery
team is responsible to make sure the open defects are captured in the
product backlog._

*Record Open Known Error in Product Backlog*

REQ 08

_When a problem is identified with an IT service, and the root cause is
determined highlighting the need for a change to the IT service, that
known error should be reflected in the product backlog so it can be
implemented in the future. The problem manager is responsible for
capturing known errors in the product backlog._

 

[width="100%",cols="50%,50%",]
|=======================================================================
|*Goal* |*Explanation*

|*G01, G05* |A product backlog should exist for an IT Service throughout
the service lifecycle.? Since requests can come from many different
sources such as the business and IT (projects and operations), it is
important to have a single list (product backlog) of all potential
changes to the IT service so the changes can be planned
comprehensively.? This promotes including operational changes and
business changes in releases of an IT Service which ultimately reduces
the cost and effort as multiple items can be resolved with one project
or initiative, thus preventing the ramp up and deployment costs
associated with multiple projects or initiatives to do the same.

|*G02, G06* |Many different software development methodologies may be
used to create or enhance an IT service.? Since we share resources among
our delivery teams, and since different resources may work on various
changes to various IT services, it is critical that some key information
is stored in a similar fashion without regard to which methodology may
be used on a given project/effort.? By storing the data in the same
repository and IT service, it then becomes a delivery team determination
on how best to meet the needs of a given project/initiative.? There is
also not time lost between modifying data to fit one methodology or
another.

|*G02, G07* |By adding end user change requests, open items from the
project delivery process, and open items from operational processes into
a single repository, it allows the delivery team to go to a single
centralized repository to see the details (or links to details) of all
in scope items thus reducing time to otherwise review and consolidate
various repositories.
|=======================================================================

 

4.2.3    Automation Specification using the Reference Architecture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

 

The product backlog is a subset of requirements which are prioritized,
associated with releases, and track status.? Requirements come from
business demand, defects, and known errors.?

The reference architecture supports the system of record functional
components for requirement, defect, and problem which ultimately are the
source of the individual items comprising the product backlog.?

The requirement functional component becomes a key integration point
between the Strategy to Portfolio and Requirement to Deploy value
streams.

 

 +
4.2.4    Essential Services supporting the scenario
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Is there an issue with application components containing app services?
Vasu raised this on the DevOps diagrams.

image:images/image015.png[image]

4.2.4.1     Artifacts and the essential attributes
++++++++++++++++++++++++++++++++++++++++++++++++++

image:images/image016.png[image] +

4.2.5    Detailed explanation on Reference Architecture usage. +
 +
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

image:images/image017.png[image]

 

[width="100%",cols="34%,33%,33%",]
|=======================================================================
|*Artifact* |*Attributes* |*Additional Information*

|*Requirement* |ID |Unique ID of requirement

|* * |IT Service ID/Name |This needs to be at least the IT Service name,
but ideally it would be the IT Service ID and the service name

|* * |Summary |This would represent the short description/title/summary
of a given requirement

|* * |Description |This would be the full description, ideally supports
rich text

|* * |Backlog priority |This priority is unique across all backlog items
for a single IT service

|* * |Backlog status |This status shows the state of the backlog item ?
considered if status should be pushed back to other systems of record ?
if so, may want to simplify and standardize the status values, and have
another attribute of detailed status or something which could be more
configured by firm/company.

|*Defect* |ID |Unique ID of defect

|* * |IT Service |This needs to be at least the IT Service name, but
ideally it would be the IT Service ID and the service name

|* * |Summary |This would represent the short description/title/summary
of a given defect

|* * |Description |This would be the full description, ideally supports
rich text

|*Known Error* |ID |Unique ID of known error

|* * |IT Service |This needs to be at least the IT Service name, but
ideally it would be the IT Service ID and the service name

|* * |Summary |This would represent the short description/title/summary
of the known error

|* * |Description |This would be the full description, ideally supports
rich text
|=======================================================================

 

 

 

 +
 

4.3    DevOps automation scenario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

[width="100%",cols="20%,20%,20%,20%,20%",]
|=======================================================================
|* * |*Strategy to Portfolio* |*Requirement to Deploy* |*Request to
Fulfill* |*Detect to Correct*

|*People* a|
Establish common values and awareness

Culture of systems engineering and collaboration

 |Ops cross-pollination |Training to develop and support maximum
automation |Dev on support frontline

|*Process* a|
Matrix organization and service aligned virtual teams supported by
shared-services engineering

Communication & Co-ordination? Awareness, Ongoing Feed-forward and
Feedback

Agile planning, Reduce WIP

 |Delivery and deployment cadence |Service catalog |Incident and Change
Management

|*Technology* a|
Lifecycle Management & Automation

Planning, reporting

metrics management (KPIs ? MTBF, MTRS)

 a|
Automate build, test

 

 a|
Automate release, deployment

Infrastructure virtualization and provisioning automation

Standardized services and components ? Common tools, modular design,
systems thinking to enable reuse

 |Automate monitoring, workload management
|=======================================================================

 

 

 

4.3.1    Scenario ?introduction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The core DevOps scenario is described thus:

*_Develop and deploy software functionality from development to
operations in a maximally automated model, with sustainable velocity and
demonstrating effective feedback._*

There are many references cited in this document on the origins and
current thinking around DevOps.

A variety of sources [link:REF_32[32-36]] suggest some common
architectural elements, named here as encountered:

?         Source Repository

?         Software Configuration Management

?         Continuous Integration and Build Management

?         Release Management

?         Build Console

?         Test Management

?         Package Repository

?         Deployment Engine

?         Deployment Console

?         Infrastructure Manager

?         Configuration Management Database

?         Event Management

?         Element Management

?         Business Process Management

Note that these elements have not been rationalized; there are overlaps.

In terms of scenarios, Eric Minick (formerly of UrbanCode, now of IBM)
suggests a set of overlapping, cumulative DevOps scenarios
[link:REF_33[33]] including:

?         Build software

?         Deploy software

?         System testing on deployment

?         Continuous delivery with monitoring and rollback

We will adopt this set of scenarios.

Note that this scenario does not include infrastructure as code.

4.3.2    Process flows
^^^^^^^^^^^^^^^^^^^^^^

While the overall goal of DevOps is integrated software delivery and
deployment, it is possible to break this down into a set of smaller
building blocks which makes the problem more manageable.

*It is critical in reading these scenarios to understand that they are
intended to be run frequently and iteratively. Without that
understanding, the critical Agile goals of fast feedback and maximizing
information are not realized.*

4.3.2.1     Build software
++++++++++++++++++++++++++

In this scenario software is constructed, tested, incorporated into a
mainline trunk, and built into releasable packages on an ongoing basis.
This is the basic Continuous Integration use case.

image:images/image018.png[image]

Reading the diagram from left to right:

1.    First, code is checked into the Service Development Component,
which equates to Source Control and any additional services.

2.    This triggers workflow to start the new build. This may be done
immediately, or on a batch basis (i.e. the ?nightly build.?)

3.    The Build Management component, performing Continuous Integration,
runs tests (invoking the Test Management Component), including
functional unit tests as well as external static analysis if called for.
Test execution may result in defects being logged.

4.    If the build succeeds, the built package is stored in the Release
Design Component (aka package repository).

4.3.2.2     Deploy software
+++++++++++++++++++++++++++

In this scenario software is pulled from the package repository and
applied to target environments in a repeatable

image:images/image019.png[image]

1.    First, some event (automated, e.g. from a successful build, or
human initiated) has initiated the deployment process.

2.    A proposed change has been submitted to and approved by the Change
Control component (this may be a standard change and approved in an
automated manner)

3.    The actual artifacts/package are pulled from the Release Design
Component into the Deployment Management System(s) and applied to the
Target System

4.    The CMDB Component is updated as required with any new
dependencies or other information originating from the package manifest.

Notes:

?         This is the point at which OSLC or TOSCA [link:REF_37[37]]
may come into play.

4.3.2.3     System testing on deployment
++++++++++++++++++++++++++++++++++++++++

In this scenario system level tests are applied to the deployed
packages.

image:images/image020.png[image] +

1.    Per the last scenario, some event has resulted in the deployment
of software to a target system.

2.    The Test Management Component executes system-level, integration,
and/or performance tests against the target system (which may be any
environment).

3.    Results (as in the first scenario) are recorded in the Defect
Management Component.

The reader may note that Incident Management is not included in this
scenario; it is in the next one.

 

4.3.2.4     Continuous delivery with monitoring and rollback
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

This scenario applies monitoring, event management, and automated
rollback to the previous.

image:images/image021.png[image]

1.    The software is now deployed into an environment with some level
of operational monitoring, starting at the lowest ?service monitoring?
level ? e.g., probes and log monitors that detect the basic operational
status of the managed element.

2.    The service monitoring component then raises events into an event
management component (sometimes called a ?manager of managers.?)

3.    The Event Management component draws upon CMDB dependencies and
its own business rules to determine if an actual Incident should be
declared.

4.    The Incident is declared, and if severe enough, may warrant
rollback of the change.

5.    The proposed rollback of the Change is approved via the Change
Control component

6.    The Deployment Management system then reverses the change.

7.    (Not shown) Root cause analysis and remediation then are presumed
to occur.

Notes:

?         There are various patterns for the roles that element
monitors, event managers, and incident systems play, but a three-tier
pattern is often seen.?

?         The term ?Service Monitoring Component? is a bit of a
misnomer, as true service-awareness is not understood at the element or
system level, but rather require the dependencies from the CMDB.

 

4.3.2.5     DevOps interpreted as an ITIL? ?flow
++++++++++++++++++++++++++++++++++++++++++++++++

This is an auxiliary view of the end to end flow, interpreted as ITIL?
?processes.

_image:images/image022.png[image]_

4.3.2.6     ??? DevOps interpreted as a SAFe flow
+++++++++++++++++++++++++++++++++++++++++++++++++

This scenario will contrast with the previous scenario and represent the
end to end delivery in SAFe terminology.

_Note: If we bring in SAFE capabilities, we may need two capability
?namespaces? ? need to discuss._

4.3.2.7     DevOps and infrastructure-centric use cases
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

In scope?

 

_ +
 _
_ _

4.3.2.8     DevOps pipeline as an ITIL? ?flow with key data objects
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Key question: is there a ?Release? data object independent of the
?Release Package? ? the ?Release? being metadata to the actual contents
of the ?Release Package???

_image:images/image023.png[image]_

_ +
 _
_ +
 _
*Capability*

*Process*

*Requirement*

 

 

 

_ _

_ _

4.3.3    Automation Specification using the Reference Architecture
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

_ _

4.4    Infrastructure as code / cloud scenario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

4.5    Kanban scenario
~~~~~~~~~~~~~~~~~~~~~~

A critical concern for Agile product development is identifying where
queues are prescribed, and therefore where work in process may
accumulate and where demand is expressed for the end user. As Don
Reinertsen notes [link:REF_4[4]],

_Queues matter because they are economically important, they are poorly
managed, and they have the potential to be much better managed. Queues
profoundly affect the economics of product development (IT services are
a form of product). They cause valuable work products to sit idle,
waiting to access busy resources. This idle time increases inventory,
which is the root cause of many other economic problems._

_Queues hurt cycle time, quality, and efficiency. Despite their economic
importance, queues are not managed in today's development processes. Few
product developers are aware of the causal links between high
capacity-utilization, queues, and poor economic performance. Instead,
developers assume that their cycle times will be faster when resources
are fully utilized. In reality, high levels of capacity utilization are
actually a primary cause of long cycle time_

Manufacturing companies use Operations theory to identify bottlenecks
and eliminate them - they've identified the value chain is only as good
as the weakest link (or weakest capacity). Little's Law and associated
rules can be adopted for modeling the service value chain and eliminate
both bottlenecks and waste.

The Kanban movement is responding to this by essentially centralizing
heterogeneous demand into simplified, common queuing mechanisms. A given
team?s Kanban board may encompass Requirements, Changes, Service
Requests, Work Orders, and even Incidents and Problems - anything that
results in someone spending some time on it. Which of these the Kanban
board includes depends on the context and function(s) of the team in
question.

 

image:images/image024.png[image]

Figure 7. Heterogeneous Kanban board

This industry direction, while clear, remains largely undocumented. The
reader is referred to Ian Carroll?s website IT Ops Kanban
[link:REF_38[38]] and the 2014 presentation by ING Bank, ?ITIL? ?and
DevOps at war in the enterprise.? [link:REF_39[39]]? In that
presentation, one of the presenters specifically discourages the use of
a Problem ticket in a Service Management tool if the Problem is also a
user story. ?Similar themes can be found in Kim?s _The Phoenix Project_
[link:REF_15[15]] and in Limoncelli?s __The Practice of Cloud System
Administration__. ?Development and operations can best speak the same
language by using the same tools wherever possible. This can be as
simple as using the same bug-tracking system for both development and
operations/ deployment issues? __ [link:REF_40[40]], p. 184.

The IT4IT reference architecture therefore explicitly identifies the
functional components that imply queues and is working towards a
logically unified queuing interface so that demand may be understood
globally across the IT value chain. Some initial requirements for this
might be:

?         A view of unified demand should be possible via integrating
all queues

?         All functional components that contain queues should be
identified

?         Cumulative flow visibility should be enabled

?         They should have common aggregation into BI

?         Smaller ?silo? queues need to be integrated into longer,
cross-functional, higher value queues

?         Within a project, have a common backlog for development and
infrastructure tasks

The possibility should be explored of defining an abstract queueing
interface, specifying which objects implement it. _[Note: Did the
Workflow Management Coalition do something like this?]_

Here is a high level representation of IT4IT functional components
possibly containing queues:

image:images/image025.png[image]

_Lars comment: The use of RFC?s as a way of controlling what is planned
to be changed, have a log of change that happened, and to govern
approving change (especially w.r.t. risk, conflicts, change windows, ?).
This use is largely not used by existing Agile projects, but they
instead have a concept of release control that understand the status of
a release (and the ability to turn on or off features based on status)_

ESITs for all queue based systems

Aspect orientation

 +
 what are the top-down drivers +
 +
 how it works in the pure agile community vs waterfall vs hybrid

 +
 

 

 

[width="100%",cols="34%,33%,33%",]
|==================================================
|*Artifact* |*Attributes* |*Additional Information*
|*Interaction* |ID | 
|* * |? | 
|*Incident* |ID | 
|* * |? | 
|* * |  | 
|==================================================

 

 

 

 

 +
 

5      Proposed Changes to the Reference Architecture
-----------------------------------------------------

 
^

[width="100%",cols="34%,33%,33%",]
|=======================================================================
|*ID* |*Proposed Change* |*Status*

|*1* a|
Add new attributes to portfolio backlog item within the Portfolio Demand
component as follows:

?         ID

?         Portfolio

?         Summary

?         Description

?         Backlog Status

?         Backlog Priority

?         Proposed Budget

?         Fiscal Year

?         IT Service ID/Name

?         Requirement ID

?         Scope Agreement ID

 a|
Proposed

 

|*2* a|
Add new attributes to conceptual service within the Service Portfolio
component as follows:

?         ID

?         Name

?         Description

 a|
Proposed

 

|*3* a|
Add new attributes to requirement within the Requirement component as
follows:

?         ID

?         IT Service ID/Name

?         Summary

?         Description

?         Backlog Status

?         Backlog Priority

?         Portfolio Backlog ID

 |Proposed

|*5* a|
Add new attributes to defect within the Defect functional component as
follows:

?         ID

?         IT Service ID/Name

?         Summary

?         Description

 |Proposed

|*6* a|
Add new attributes to known error in the Problem functional component as
follows:

?         ID

?         IT Service ID/Name

?         Summary

?         Description

 |Proposed

|*7* a|
Add new attributes to scope agreement in the Proposal component as
follows:

?         ID

?         Portfolio Backlog Item ID

?         IT Service ID/Name

?         Summary

?         Description

 |Proposed
|=======================================================================

 
^

6      Appendix
---------------

 

 

6.1    Outstanding issues in this document
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[width="100%",cols="50%,50%",]
|=======================================================================
|*Name* |*Description*

|*Story traceability* |Discuss relationship between stories and DevOps
pipeline, traceability from build process back to user requirement ? ALM
system needed?

|*DevOps artifacts & data objects* |Need to complete data layer for
DevOps section

|*4.3 diagram* |Consider whether should go to front section and cover
entire document.

|*4.3.2* |Consider high level diagram illustrating iterative nature of
DevOps
|=======================================================================

 

6.2    Abbreviations used
~~~~~~~~~~~~~~~~~~~~~~~~~

 

[width="100%",cols="50%,50%",]
|=============================
|*Abbreviation* |*Explanation*
|* * | 
|=============================

 

 

 

 

 

 +
* *

6.3    References
~~~~~~~~~~~~~~~~~

 

[width="100%",cols="34%,33%,33%",]
|=============================
|*Document* |*Version* |*Date*
|* * |  | 
|=============================

 

 

1.???????? Ries, E., __The lean startup : how today's entrepreneurs use
continuous innovation to create radically successful businesses__. 1st
ed. 2011, New York: Crown Business. 320 p.

2.???????? Anderson, D.J., __Kanban: Successful Evolutionary Change for
your Technology Business__. 2010, Sequim, WA: Blue Hole Press.

3.???????? Humble, J. and Farley, D., __Continuous delivery__. 2011,
Boston: Addison-Wesley. xxxiii, 463 p.

4.???????? Reinertsen, D.G., __The principles of product development
flow: second generation lean product development__. 2009, Redondo Beach,
Calif.: Celeritas. ix, 294 p.

5.???????? Ohno, T., __Toyota production system : beyond large-scale
production__. 1988, Cambridge, Mass.: Productivity Press.

6.???????? Krafcik, J., _Triumph of the lean production system._ Sloan
Management Review, 1988. **30**(1): p. 41-52.

7.???????? Liker, J.K., __The Toyota way : 14 management principles from
the world's greatest manufacturer__. 2004, New York: McGraw-Hill. xxii,
330 p.

8.???????? Womack, J.P. and Jones, D.T., __Lean thinking: banish waste
and create wealth in your corporation__. 1st Free Press ed. 2003, New
York: Free Press. 396 p.

9.???????? Womack, J.P., et al., __The machine that changed the world :
based on the Massachusetts Institute of Technology 5-million dollar
5-year study on the future of the automobile__. 1990, New York: Rawson
Associates. viii, 323 p.

10.??????? Goldratt, E.M., __Critical chain__. 1997, Great Barrington,
Ma.: North River. 246 p.

11.??????? Goldratt, E.M. and Cox, J., __The goal : a process of ongoing
improvement__. 3rd rev. ed. 2004, Great Barrington, MA: North River
Press. 384 p.

12.??????? Agile Alliance. __Agile Manifesto and Principles__. 2001?
4/13/2011]; Available from:
http://agilemanifesto.org/principles.html[*http://agilemanifesto.org/principles.html*].

13.??????? Poppendieck, M. and Poppendieck, T.D., __Lean Software
Development: An Agile Toolkit__. The Agile Software Development Series,
ed. A. Cockburn and J. Highsmith. 2003, Boston: Addison Wesley.

14.??????? Reinertsen, D.G., __Managing the design factory: a product
developer's toolkit__. 1997, New York ; London: Free Press. xi,269p.

15.??????? Kim, G., Behr, K., and Spafford, G., __The Phoenix Project: A
Novel About IT, DevOps, and Helping Your Business Win__. 2013: IT
Revolution Press.

16.??????? Allspaw, J. and Hammond, P., __10 deploys per day: Dev & ops
cooperation at Flickr__, in __Velocity 2009__2009, O'Relly Publications:
San Jose, CA.
http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr[*http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr*]

17.??????? Betz, C.T., __Architecture and Patterns for IT: Service and
Portfolio Management and Governance (Making Shoes for the Cobbler's
Children), 2nd Edition__. 2011, Amsterdam: Elsevier/Morgan Kaufman.

18.??????? Buschmann, F., __Pattern-oriented software architecture : a
system of patterns__. 1996, Chichester ; New York: Wiley. xvi, 457.

19.??????? Fowler, M., __Analysis patterns : reusable object models__.
1997, Menlo Park, Calif.: Addison Wesley. xxi, 357.

20.??????? Fowler, M., __Patterns of enterprise application
architecture__. The Addison-Wesley signature series. 2003, Boston:
Addison-Wesley. xxiv, 533.

21.??????? Gamma, E., __Design patterns : elements of reusable
object-oriented software__. 1995, Reading, Mass.: Addison-Wesley. xv,
395.

22.??????? Hay, D.C., __Data model patterns : conventions of thought__.
1996, New York: Dorset House Pub. xix, 268.

23.??????? Hay, D.C., __Data model patterns : a metadata map__. 2006,
San Francisco, Calif.: Morgan Kaufmann ; Oxford : Elsevier Science
[distributor]. xx, 406 p. : ill. ; 25 cm.

24.??????? Hohpe, G. and Woolf, B., __Enterprise integration patterns :
designing, building, and deploying messaging solutions__. 2003, Boston:
Addison-Wesley. . cm.

25.??????? Larman, C., __Applying UML and patterns : an introduction to
object-oriented analysis and design and the unified process__. 2nd ed.
2002, Upper Saddle River, NJ: Prentice Hall PTR. xxi, 627.

26.??????? Silverston, L., __The data model resource book Vol 3:
Universal patterns for data modeling__. 2008, Indianapolis, Ind.: Wiley.
xxxii, 606 p.

27.??????? Poppendieck, M. and Poppendieck, T.D., __Implementing lean
software development : from concept to cash__. 2007, London:
Addison-Wesley. xxv, 276 p.

28.??????? Kniberg, H., Beck, K., and Keppler, K., __Lean from the
trenches : managing large-scale projects with Kanban__. Pragmatic
programmers. 2011, Dallas, Tex.: Pragmatic Bookshelf. xiii, 157 p.

29.??????? Bell, S.C. and Orzen, M.A., __Lean IT__. 2010, Boca Raton,
Florida: CRC Press.

30.??????? Scotland, K., __Defining the Last Responsible Moment__, in
__AvailAgility__2010.
http://availagility.co.uk/2010/04/06/defining-the-last-responsible-moment[*http://availagility.co.uk/2010/04/06/defining-the-last-responsible-moment*]

31.??????? Duvall, P.M., Matyas, S., and Glover, A., __Continuous
integration : improving software quality and reducing risk__.
Addison-Wesley signature series. 2007, Upper Saddle River, NJ:
Addison-Wesley. xxxiii, 283 p.

32.??????? Edwards, D., __Integrating DevOps tools into a Service
Delivery Platform__, 2012.
http://dev2ops.org/2012/07/integrating-devops-tools-into-a-service-delivery-platform-video/[*http://dev2ops.org/2012/07/integrating-devops-tools-into-a-service-delivery-platform-video/*]

33.??????? Minick, E., __A DevOps Toolchain: There and back again__,
2012, Slideshare.net.
http://www.slideshare.net/Urbancode/building-devops-toolchain[*http://www.slideshare.net/Urbancode/building-devops-toolchain*]

34.??????? Thompson, L., __Hitchhikers Guide to OpenStack Toolchains__,
2014.
https://http://www.openstack.org/assets/presentation-media/Hitchhikers-Guide-to-OpenStack-Toolchains.pdf[*www.openstack.org/assets/presentation-media/Hitchhikers-Guide-to-OpenStack-Toolchains.pdf*]

35.??????? Betz, C., __Release management integration pattern - seeking
devops comments__, in __Lean4IT: The architecture of IT value__2011.
http://www.lean4it.com/2011/01/release-management-integration-pattern-seeking-devops-comments.html[*http://www.lean4it.com/2011/01/release-management-integration-pattern-seeking-devops-comments.html*]

36.??????? Shortland, A. and Lei, M., __Using Rundeck and Chef to build
DevOps Toolchains__, 2012.
http://dev2ops.org/2012/05/using-rundeck-and-chef-to-build-devops-toolchains-at-chefcon/[*http://dev2ops.org/2012/05/using-rundeck-and-chef-to-build-devops-toolchains-at-chefcon/*]

37.??????? OASIS, __Topology and Orchestration Specification for Cloud
Applications Version 1.0 (TOSCA)__, 2013.
http://docs.oasis-open.org/tosca/TOSCA/v1.0/os/TOSCA-v1.0-os.html[*http://docs.oasis-open.org/tosca/TOSCA/v1.0/os/TOSCA-v1.0-os.html*]

38.??????? Carroll, I., __Various__, in __IT Ops Kanban: Kanban Case
Study for Operations__2013.
http://itopskanban.wordpress.com/before/[*http://itopskanban.wordpress.com/before/*]

39.??????? Bouwman, J.-J. and Heistek, M. __ITIL? ?and DevOps at war in
the enterprise__. in _DevOpsDays_ 2014. Amsterdam.
https://http://www.youtube.com/watch?v=_dDsdbkSgOc[*www.youtube.com/watch?v=_dDsdbkSgOc*]

40.??????? Limoncelli, T.A., Chalup, S.R., and Hogan, C.J., __The
Practice of Cloud System Administration: Designing and Operating Large
Distributed Systems, Vol. 2__, 2014, Pearson Education.

 

 
