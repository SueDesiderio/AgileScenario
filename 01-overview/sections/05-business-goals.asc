3.2    Business Goals
~~~~~~~~~~~~~~~~~~~~~

It is by now well established that the IT value chain is best seen as a
product development and management process, as opposed to a truly
repetitive production process [link:REF_17[17]]. Reinertsen,
Poppendieck, and others have developed a variety of well documented and
empirically proven principles that characterize the Agile/Lean approach
for product development [link:REF_4[4], link:REF_13[13],
link:REF_14[14], link:REF_27[27]]. These apply to software
development, product development, and business development at its most
general.

Essential Agile requirements can be inferred from these classic
questions from Mary and Tom Poppendieck:

* **How long would it take your organization to deploy a change
that involved just one single line of code?**

* **Do you deploy changes at this pace on a repeatable, reliable
basis?** **[**link:REF_27[*27*]*], p. 92.*

The Kanban movement addresses these business goals by limiting work in
process through simple and effective shared visual models
[link:REF_2[2], link:REF_28[28]], while the DevOps movement
seeks to satisfy these business goals by accelerating and making the end
to end software pipeline as automated as possible while bridging the
cultural divide between ?Development? and ?Operations.?
[link:REF_3[3]]

image:../images/image009.png[image]

Figure 6. Importance of feedback

Feedback is a critical objective in product development (e.g. software
and systems development); as product development is essentially the
generation of information ([link:REF_4[4]], )

Examination of various Agile sources supports the following matrix of
business objectives for the Agile scenario:

 +
 

[width="100%",cols="34%,33%,33%",]
|======================
|*ID* |*Goals* |*Notes*
|======================

[width="100%",cols="34%,33%,33%",]
|=======================================================================
|G.0.1 |Correctly apply economics [link:REF_4[4]] | 

|G.0.1.1 |Understand overall economic impact |e.g. leveraging beneficial
variability and uncertainty, e.g. a 50% chance of making $1m is worth
more than a 100% chance of making $100,000.

|G.0.1.2 |Understand cost of delay and value of information | 

|G.0.1.3 |Understand metrics as economic proxy variables | 

|G.0.2 |Avoid waste [link:REF_4[4], link:REF_27[27],
link:REF_29[29]] | 

|G.0.2.1 |Limit work in process | 

|G.0.2.2 |Reduce task switching or multi-tasking | 

|G.0.2.3 |Eliminate Non-value-add process | 

|G.0.2.4 |Minimize manual work | 

|G.0.2.5 |Identify, make visible, and manage all work queues | 

|G.0.2.6 |Avoid the antipattern of ?optimizing? for utilization
[link:REF_11[11]] | 

|G.0.3 |Maximize information [link:REF_4[4]] | 

|G.0.3.1 |Seek fast feedback | 

|G.0.3.2 |Invest in options where possible (e.g. parallel development to
explore different product directions simultaneously) | 

|G.0.3.3 |Defer commitment until last responsible moment
[link:REF_30[30]] | 

|G.0.3.4 |Ensure information visibility across entire pipeline |Promote
whole systems thinking, ensure broad visibility of functionality moving
through pipeline, support techniques like Incident to Issue linkage

|G.0.4 |Manage for flow under uncertainty [link:REF_4[4]] | 

|G.0.4.1 |Manage batch size | 

|G.0.4.2 |Synchronize complex activities | 

|G.0.4.3 |Minimize variability in repetitive processes | 

|G.0.4.4 |Accept and manage variability in creative processes | 

|G.0.5 |Build effective culture [find Deming on individual vs system
failures] | 

|G.0.5.1 |Manage for end state and intent | 

|G.0.5.2 |Encourage self-organization [link:REF_2[2]] | 

|G.0.5.3 |Tolerate failure; maximize information captured and focus on
problem solving | 

|G.0.5.4 |Employ proven human motivators: autonomy, recognition,
collaboration, flow | 

|G.0.5.5 |Avoid demotivators: control, blame, non-value-adding work | 

|G.0.6 |Build effective software pipeline [link:REF_3[3]] | 

|G.0.6.1 |Continuously integrate and test source code and system
functionality at appropriate levels (e.g. unit, integration, and system)
[link:REF_31[31]] | 

|G.0.6.2 |Maintain complex system functionality in an ?always shippable?
state | 

|G.0.6.3 |Fully automate the repetitive aspects of code development,
build, testing, and deployment | 

|G.0.6.4 |Seek end to end integration of ?development? and ?operations?
tasks, resources, communication, and culture. | 

|G.0.6.5 |Build a product-centric mindset where the overriding goal is
software functioning correctly in production. | 

|G.0.6.6 |Use consistent configurations, toolsets and resources in
building all environments across the pipeline | 

|G.0.6.7 |Roll back failed changes immediately with robust and well
tested, automated approaches. | 

|  |  | 
|=======================================================================

 

Note: There is one set of unified Business goals for the Agile scenario
as a whole, but each sub-scenario has its own requirements.
